
XOR_OR_AND_GATES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001cc  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001fb  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000209  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000760  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ee  00000000  00000000  00000989  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    000000c8  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__dummy_fini 00000002  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_funcs_on_exit 00000002  00000154  00000154  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_simulator_exit 00000002  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.exit    00000016  00000134  00000134  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._Exit   00000004  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
   8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
   c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  34:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
  50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

0000014a <__bad_interrupt>:
 14a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:


int main(void)
{
	//using port D as input for switches (pull up res.)
	DDRD &= 0x00;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	11 ba       	out	0x11, r1	; 17
	PORTD |= 0xff;
  70:	82 b3       	in	r24, 0x12	; 18
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	82 bb       	out	0x12, r24	; 18
	
	// port A,B,C as output for LEDs 
	DDRA|=0xff;
  76:	9a b3       	in	r25, 0x1a	; 26
  78:	8a bb       	out	0x1a, r24	; 26
	DDRB|=0x01;
  7a:	87 b3       	in	r24, 0x17	; 23
  7c:	81 60       	ori	r24, 0x01	; 1
  7e:	87 bb       	out	0x17, r24	; 23
	DDRC|=0x01;
  80:	84 b3       	in	r24, 0x14	; 20
  82:	81 60       	ori	r24, 0x01	; 1
  84:	84 bb       	out	0x14, r24	; 20
	
	
    while(1)
    {
        //for port A OR gate
		if((PIND&(1<<PD0)) == 0 && (PIND&(1<<PD1)) !=0)
  86:	80 99       	sbic	0x10, 0	; 16
  88:	15 c0       	rjmp	.+42     	; 0xb4 <main+0x48>
  8a:	81 9b       	sbis	0x10, 1	; 16
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <main+0x48>
		{
			
			if((PIND&(1<<PD6)) == 0 || (PIND&(1<<PD7)) == 0)
  8e:	86 9b       	sbis	0x10, 6	; 16
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
  92:	87 99       	sbic	0x10, 7	; 16
  94:	08 c0       	rjmp	.+16     	; 0xa6 <main+0x3a>
			{
				PORTB&=0x00;
  96:	88 b3       	in	r24, 0x18	; 24
  98:	18 ba       	out	0x18, r1	; 24
				PORTC&=0x00;
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	15 ba       	out	0x15, r1	; 21
				PORTA |= 0x01;
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	f0 cf       	rjmp	.-32     	; 0x86 <main+0x1a>
			}
			else{
				PORTB&=0x00;
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	18 ba       	out	0x18, r1	; 24
				PORTC&=0x00;
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	15 ba       	out	0x15, r1	; 21
				PORTA&=0x00;
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	1b ba       	out	0x1b, r1	; 27
  b2:	e9 cf       	rjmp	.-46     	; 0x86 <main+0x1a>
			
			
		}
		
		//for port B AND gate
		else if((PIND&(1<<PD0)) == 0 && (PIND&(1<<PD1)) ==0)
  b4:	80 99       	sbic	0x10, 0	; 16
  b6:	15 c0       	rjmp	.+42     	; 0xe2 <main+0x76>
  b8:	81 99       	sbic	0x10, 1	; 16
  ba:	13 c0       	rjmp	.+38     	; 0xe2 <main+0x76>
		{
			if((PIND&(1<<PD6)) == 0 && (PIND&(1<<PD7)) == 0)
  bc:	86 99       	sbic	0x10, 6	; 16
  be:	0a c0       	rjmp	.+20     	; 0xd4 <main+0x68>
  c0:	87 99       	sbic	0x10, 7	; 16
  c2:	08 c0       	rjmp	.+16     	; 0xd4 <main+0x68>
			{
				PORTC&=0x00;
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	15 ba       	out	0x15, r1	; 21
				PORTA&=0x00;
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	1b ba       	out	0x1b, r1	; 27
				PORTB|=0x01;
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	d9 cf       	rjmp	.-78     	; 0x86 <main+0x1a>
			}
			else{
				PORTB&=0x00;
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	18 ba       	out	0x18, r1	; 24
				PORTC&=0x00;
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	15 ba       	out	0x15, r1	; 21
				PORTA&=0x00;
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	1b ba       	out	0x1b, r1	; 27
  e0:	d2 cf       	rjmp	.-92     	; 0x86 <main+0x1a>
			
			
		}
		
		//for port C XOR gate
		else if((PIND&(1<<PD0)) == 1 && (PIND&(1<<PD1)) == 0)
  e2:	80 9b       	sbis	0x10, 0	; 16
  e4:	20 c0       	rjmp	.+64     	; 0x126 <main+0xba>
  e6:	81 99       	sbic	0x10, 1	; 16
  e8:	1e c0       	rjmp	.+60     	; 0x126 <main+0xba>
		{
			
			if(((PIND&(1<<PD6))==0) != ((PIND&(1<<PD7))==0) )
  ea:	90 b3       	in	r25, 0x10	; 16
  ec:	92 95       	swap	r25
  ee:	96 95       	lsr	r25
  f0:	96 95       	lsr	r25
  f2:	93 70       	andi	r25, 0x03	; 3
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	98 27       	eor	r25, r24
  f8:	91 70       	andi	r25, 0x01	; 1
  fa:	80 b3       	in	r24, 0x10	; 16
  fc:	80 95       	com	r24
  fe:	88 1f       	adc	r24, r24
 100:	88 27       	eor	r24, r24
 102:	88 1f       	adc	r24, r24
 104:	98 17       	cp	r25, r24
 106:	41 f0       	breq	.+16     	; 0x118 <main+0xac>
			{
				
				
				PORTA&=0x00;
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	1b ba       	out	0x1b, r1	; 27
				PORTB&=0x00;
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	18 ba       	out	0x18, r1	; 24
				PORTC|=0x01;
 110:	85 b3       	in	r24, 0x15	; 21
 112:	81 60       	ori	r24, 0x01	; 1
 114:	85 bb       	out	0x15, r24	; 21
 116:	b7 cf       	rjmp	.-146    	; 0x86 <main+0x1a>
		    }
			
			else{
				
				PORTB&=0x00;
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	18 ba       	out	0x18, r1	; 24
				PORTC&=0x00;
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	15 ba       	out	0x15, r1	; 21
				PORTA&=0x00;
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	1b ba       	out	0x1b, r1	; 27
 124:	b0 cf       	rjmp	.-160    	; 0x86 <main+0x1a>
			
			
		}
		
		else{
			PORTB&=0x00;
 126:	88 b3       	in	r24, 0x18	; 24
 128:	18 ba       	out	0x18, r1	; 24
			PORTC&=0x00;
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	15 ba       	out	0x15, r1	; 21
			PORTA&=0x00;
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	1b ba       	out	0x1b, r1	; 27
 132:	a9 cf       	rjmp	.-174    	; 0x86 <main+0x1a>

Disassembly of section .text.__dummy_fini:

00000152 <_fini>:
 152:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000154 <__funcs_on_exit>:
 154:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000156 <__simulator_exit>:
 156:	08 95       	ret

Disassembly of section .text.exit:

00000134 <exit>:
 134:	ec 01       	movw	r28, r24
 136:	0e 94 aa 00 	call	0x154	; 0x154 <__funcs_on_exit>
 13a:	0e 94 a9 00 	call	0x152	; 0x152 <_fini>
 13e:	ce 01       	movw	r24, r28
 140:	0e 94 ab 00 	call	0x156	; 0x156 <__simulator_exit>
 144:	ce 01       	movw	r24, r28
 146:	0e 94 a7 00 	call	0x14e	; 0x14e <_Exit>

Disassembly of section .text._Exit:

0000014e <_Exit>:
 14e:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
