
DOOR_BELL_intrrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000170  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000019f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000884  00000000  00000000  000001e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00001005  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000ee  000000ee  00000162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_intrrupt 00000016  000000aa  000000aa  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Set_pins 0000000e  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 0000003e  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000000a  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  000000f6  000000f6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  000000f8  000000f8  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  000000fa  000000fa  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  000000c0  000000c0  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <_etext>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_intrrupt:

000000aa <init_intrrupt>:
#include <util/delay.h>
#define F_CPU 1000000UL


void init_intrrupt(){
	MCUCR|=(1<<ISC01);
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	85 bf       	out	0x35, r24	; 53
	MCUCR&=~(1<<ISC00);
  b0:	85 b7       	in	r24, 0x35	; 53
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	85 bf       	out	0x35, r24	; 53
	GICR|=(1<<INT0);
  b6:	8b b7       	in	r24, 0x3b	; 59
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8b bf       	out	0x3b, r24	; 59
	sei();
  bc:	78 94       	sei
  be:	08 95       	ret

Disassembly of section .text.Set_pins:

000000d6 <Set_pins>:
	
}

void Set_pins(){
	
	DDRD|=0b00000001;
  d6:	81 b3       	in	r24, 0x11	; 17
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	81 bb       	out	0x11, r24	; 17
	PORTD|=0b00000100;
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	82 bb       	out	0x12, r24	; 18
  e2:	08 95       	ret

Disassembly of section .text.__vector_1:

0000006c <__vector_1>:
}
ISR(INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	
		PORTD|=(1<<PD0);
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e3       	ldi	r18, 0x3F	; 63
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	93 e0       	ldi	r25, 0x03	; 3
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <__vector_1+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_1+0x26>
  92:	00 00       	nop
		
		_delay_ms(1000);
		
		PORTD&=~(1<<PD0);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	82 bb       	out	0x12, r24	; 18
		
	}
  9a:	9f 91       	pop	r25
  9c:	8f 91       	pop	r24
  9e:	2f 91       	pop	r18
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

Disassembly of section .text.main:

000000e4 <main>:
	


int main(void)
{
	init_intrrupt();
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <init_intrrupt>
	Set_pins();
  e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <Set_pins>
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0x8>

Disassembly of section .text.__dummy_fini:

000000f6 <_fini>:
  f6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000f8 <__funcs_on_exit>:
  f8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000fa <__simulator_exit>:
  fa:	08 95       	ret

Disassembly of section .text.exit:

000000c0 <exit>:
  c0:	ec 01       	movw	r28, r24
  c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <__funcs_on_exit>
  c6:	0e 94 7b 00 	call	0xf6	; 0xf6 <_fini>
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 7d 00 	call	0xfa	; 0xfa <__simulator_exit>
  d0:	ce 01       	movw	r24, r28
  d2:	0e 94 79 00 	call	0xf2	; 0xf2 <_Exit>

Disassembly of section .text._Exit:

000000f2 <_Exit>:
  f2:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
